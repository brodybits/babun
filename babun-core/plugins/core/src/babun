#!/bin/bash
set -e -f -o pipefail
source "/usr/local/etc/babun.instance"
# shellcheck source=/usr/local/etc/babun/source/babun-core/tools/script.sh
source "$babun_tools/script.sh"
# shellcheck source=/usr/local/etc/babun/source/babun-core/tools/procps.sh
source "$babun_tools/procps.sh"
# shellcheck source=/usr/local/etc/babun/source/babun-core/tools/check.sh
source "$babun_tools/check.sh"

# babun
core="$babun_source/babun-core"

check_only_one_running "babun"

PROG=babun
USAGE="\
$PROG: Manages the instance of $PROG.

Usage:
    $PROG update to fetch the newest version of $PROG
    $PROG check to check if the installation is correct
    $PROG shell to display the name of the user's default shell (may not be the currently used shell)
    $PROG shell <new_shell> to set the user's default shell to new_shell
    $PROG install to (re)install $PROG to the current user's home folder
    $PROG login to login to the user's default shell
    $PROG <plugin_name> cmd to execute cmd provided by the given plugin

Options:
    --help
    --version
    --welcome
"

function usage()
{
    echo "$USAGE"
}

function version()
{
    echo "$PROG version $(cat $babun/installed/babun 2> /dev/null || echo '1.0.1 ???')"
    echo "Created and maintained by Tom Bujok (@tombujok) and Lukasz Pielak (@lukaszpielak)."
    echo "Copyright (c) 2014-2016."
}

function welcome()
{
    local msg="\
Welcome to $PROG - the Windows shell you will love!
You have got a lot of things under the hood here!

    pact -> a package manager that handles installation of $PROG packages
        pact install tar -> will install tar package on your system
        pact remove tar -> will remove tar package from your system

    $PROG -> a script that manages $PROG and enables auto-update
        $PROG help -> will display $PROG script usage
        $PROG check -> will check the configuration (proxy, connection, etc)
        $PROG update -> will update $PROG to the newest version
        $PROG --welcome -> will display this message again

There are a couple of plugins installed by default: oh-my-zsh, pact, cacert, etc.
There are also a lot of dev tools such as git, svn, unix utils, etc
If you would like to contribute, code up a plugin or report an issue just
go to GitHub: https://github.com/babun/babun

If you like the project, star it on GitHub and follow us on twitter!
This project is created and maintained by Tom Bujok (@tombujok) and Lukasz Pielak (@lukaszpielak).
"
    echo "$msg"
}

function update()
{
    local args="$1"

    if [ "$args" != "" ] && [ "$args" != "--force" ]; then echo "ERROR: Wrong argument $args"; exit 1; fi
    echo "Executing babun update"

    permcheck=$( chmod 777 /usr/local/bin/babun 2> /dev/null || echo "FAILED" )
    if [[  $permcheck == "FAILED" ]]; then
        echo "ERROR: You don't have write permission to / filesystem. Aborting!"
        echo "Have you installed babun as admin and run it from a non-admin account? Retry as admin."
        exit 1
    fi

    cp "$core"/tools/update_source.sh /tmp/update_source.sh
    /tmp/update_source.sh "$args"
    exit 0
}

function install()
{
    local args="$1"
    if ! [[ $args == "" ]]; then echo "ERROR: Wrong argument $args"; exit 1; fi
    echo "Executing babun install"
    "$core"/plugins/install_home.sh
    exit 0
}

function check()
{
    local args="$1"
    if ! [[ $args == "" ]]; then echo "ERROR: Wrong argument $args"; exit 1; fi
    echo "Executing babun check"
    babun_check
}

function shell()
{
    newshell="$1"
    passwd=$( sort -u /etc/passwd )
    if ! [[ -z "$passwd" ]]; then
        echo "$passwd" > /etc/passwd
    fi
    currshell=$( awk "/^$USERNAME/ { print $1 }" /etc/passwd | grep -oh ":/.*sh" | grep -oP "(?<=.:)/.*" )

    if [[ $newshell == "" ]]; then
        echo "$currshell"
        exit 0
    fi

    if ! [ -f "$newshell" ]; then
       echo "ERROR: Cannot set shell to $newshell. Specified shell does not exist!"
       exit 1
    fi

    echo "$currshell"
    echo "$newshell"
    sed -i "/^$USERNAME/s|$currshell|$newshell|" "/etc/passwd" || echo "ERROR: Changing shell to $newshell failed" ; exit 1
}

# Main processing of inputs
case $# in
  0) usage ; exit 0 ;;
esac

case $1 in
    --help)
        usage
        exit 0
        ;;

    --version)
        version
        exit 0
        ;;

    --welcome)
        welcome
        exit 0
        ;;

    --login|login)
        # shellcheck disable=SC2119
        proc_shell_login
        exit 0
        ;;

    check)
        shift; check "$@" ;;

    install)
        shift; install "$@" ;;

    update)
        shift; update "$@" ;;

    shell)
        shift; shell "$@" ;;

    *)
        # forward the execution to the plugin in the babun <plugin_name> cmd format
        # the first input parameter should be the plugin name and the remainder are
        # inputs to the plugin exec script.
        plugin="$1"
        shift
        if [ $# -gt 0 ]; then
            if [[ -f "$babun_plugins/$plugin/exec.sh" ]]; then
                "$babun_plugins/$plugin/exec.sh" "$@"
            else
                usage
            fi
        else
            usage
        fi

        ;;
esac
