#!/bin/bash
set -e -f -o pipefail
source "/usr/local/etc/babun.instance"
# shellcheck source=/usr/local/etc/babun/source/babun-core/tools/script.sh
source "$babun_tools/script.sh"
# shellcheck source=/usr/local/etc/babun/source/babun-core/tools/procps.sh
source "$babun_tools/procps.sh"
# shellcheck source=/usr/local/etc/babun/source/babun-core/tools/check.sh
source "$babun_tools/check.sh"

# babun
core="$babun_source/babun-core"

check_only_one_running "babun"

function usage()
{
    echo "babun: Manages the instance of babun."
    echo ""
    echo "Usage:"
    echo "  \"babun update\" to fetch the newest version of babun"
    echo "  \"babun check\" to check if the installation is correct"
    echo "  \"babun shell\" to display the name of the user's default shell (may not be the currently used shell)"
    echo "  \"babun shell <new_shell>\" to set the user's default shell to new_shell"
    echo "  \"babun install\" to (re)install babun to the current user's home folder"
    echo "  \"babun login\" to login to the user's default shell"
    echo "  \"babun <plugin_name> cmd\" to execute cmd provided by the given plugin"
    echo "Options:"
    echo "  --help"
    echo "  --version"
    echo "  --welcome"
}

function version()
{
    echo "babun version $(cat $babun/installed/babun 2> /dev/null || echo '1.0.1 ???')"
    echo "Created and maintained by Tom Bujok (@tombujok) and Lukasz Pielak (@lukaszpielak)."
    echo "Copyright (c) 2014-2016."
}

function welcome()
{
    echo "Welcome to babun - the Windows shell you will love!"
    echo "You have got a lot of things under the hood here!"
    echo ""
    echo "   pact -> a package manager that handles installation of babun packages"
    echo "      pact install tar -> will install tar package on your system"
    echo "      pact remove tar -> will remove tar package from your system"
    echo ""
    echo "   babun -> a script that manages babun and enables auto-update"
    echo "      babun help -> will display babun script usage"
    echo "      babun check -> will check the configuration (proxy, connection, etc)"
    echo "      babun update -> will update babun to the newest version"
    echo "      babun --welcome -> will display this message again"
    echo ""
    echo "There are a couple of plugins installed by default: oh-my-zsh, pact, cacert, etc."
    echo "There are also a lot of dev tools such as git, svn, unix utils, etc"
    echo "If you would like to contribute, code up a plugin or report an issue just"
    echo "go to GitHub: https://github.com/babun/babun"
    echo ""
    echo "If you like the project, star it on GitHub and follow us on twitter!"
    echo "This project is created and maintained by Tom Bujok (@tombujok) and Lukasz Pielak (@lukaszpielak)."
}

function update()
{
    local args="$1"

    if [ "$args" != "" ] && [ "$args" != "--force" ]; then echo "ERROR: Wrong argument $args"; exit 1; fi
    echo "Executing babun update"

    permcheck=$( chmod 777 /usr/local/bin/babun 2> /dev/null || echo "FAILED" )
    if [[  $permcheck == "FAILED" ]]; then
        echo "ERROR: You don't have write permission to / filesystem. Aborting!"
        echo "Have you installed babun as admin and run it from a non-admin account? Retry as admin."
        exit 1
    fi

    cp "$core"/tools/update_source.sh /tmp/update_source.sh
    /tmp/update_source.sh "$args"
    exit 0
}

function install()
{
    local args="$1"
    if ! [[ $args == "" ]]; then echo "ERROR: Wrong argument $args"; exit 1; fi
    echo "Executing babun install"
    "$core"/plugins/install_home.sh
    exit 0
}

function check()
{
    local args="$1"
    if ! [[ $args == "" ]]; then echo "ERROR: Wrong argument $args"; exit 1; fi
    echo "Executing babun check"
    babun_check
}

function shell()
{
    newshell="$1"
    passwd=$( sort -u /etc/passwd )
    if ! [[ -z "$passwd" ]]; then
        echo "$passwd" > /etc/passwd
    fi
    currshell=$( awk "/^$USERNAME/ { print $1 }" /etc/passwd | grep -oh ":/.*sh" | grep -oP "(?<=.:)/.*" )

    if [[ $newshell == "" ]]; then
        echo "$currshell"
        exit 0
    fi

    if ! [ -f "$newshell" ]; then
       echo "ERROR: Cannot set shell to $newshell. Specified shell does not exist!"
       exit 1
    fi

    echo "$currshell"
    echo "$newshell"
    sed -i "/^$USERNAME/s|$currshell|$newshell|" "/etc/passwd" || echo "ERROR: Changing shell to $newshell failed" ; exit 1
}

# Main processing of inputs
case $# in
  0) usage ; exit 0 ;;
esac

case $1 in
    --help)
        usage
        exit 0
        ;;

    --version)
        version
        exit 0
        ;;

    --welcome)
        welcome
        exit 0
        ;;

    --login|login)
        # shellcheck disable=SC2119
        proc_shell_login
        exit 0
        ;;

    check)
        shift; check "$@" ;;

    install)
        shift; install "$@" ;;

    update)
        shift; update "$@" ;;

    shell)
        shift; shell "$@" ;;

    *)
        # forward the execution to the plugin in the babun <plugin_name> cmd format
        # the first input parameter should be the plugin name and the remainder are
        # inputs to the plugin exec script.
        plugin="$1"
        shift
        if [ $# -gt 0 ]; then
            if [[ -f "$babun_plugins/$plugin/exec.sh" ]]; then
                "$babun_plugins/$plugin/exec.sh" "$@"
            else
                usage
            fi
        else
            usage
        fi

        ;;
esac
