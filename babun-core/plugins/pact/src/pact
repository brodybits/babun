#!/bin/bash
set -f -o pipefail
# disabled for now, script is not compatible with this option
# set -e

source "/usr/local/etc/babun.instance"
# shellcheck source=/usr/local/etc/babun/source/babun-core/tools/check.sh
source "$babun_tools/check.sh"
# shellcheck source=/usr/local/etc/babun/source/babun-core/tools/procps.sh
source "$babun_tools/procps.sh"
# shellcheck source=/home/tester/.pact/pact.repo
source ~/.pact/pact.repo

# this script requires some packages
if     [[ -z $(which wget 2> /dev/null) ]] \
    || [[ -z $(which bzip2 2> /dev/null) ]] \
    || [[ -z $(which tar 2> /dev/null) ]] \
    || [[ -z $(which awk 2> /dev/null) ]] \
    || [[ -z $(which xz 2> /dev/null) ]]; then

    echo "You must install wget, tar, gawk, bzip2 and xz to use pact."
    exit 1
fi

if [ -z "$USER_AGENT" ]; then
  USER_AGENT="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"
fi

## Global Variables

# default to the value sourced from the user repo configuration
MIRROR=$PACT_REPO
DEFAULT_MIRROR=http://mirrors.kernel.org/sourceware/cygwin/

SETUP_DIR=/etc/setup
INSTALLED_DB="$SETUP_DIR/installed.db"
SETUP_FILE=setup.ini

# Global Process Options
NOSCRIPTS=0
INVALIDATE=0
FORCE=0

PROG=pact
USAGE="\
$PROG: Installs and removes Cygwin packages.

Usage:
    $PROG [OPTION] install <package names> to install given packages
    $PROG [OPTION] remove <package names> to remove given packages
    $PROG [OPTION] update <package names> to update given packages
    $PROG [OPTION] show to show installed packages
    $PROG [OPTION] find <patterns> to find packages matching patterns
    $PROG [OPTION] describe <patterns> to describe packages matching patterns
    $PROG packageof <commands or files> to locate parent packages
    $PROG invalidate to invalidate $PROG caches ($SETUP_FILE, etc.)

Options:
    --mirror, -m <url> : set mirror
    --invalidate, -i       : invalidate $PROG caches ($SETUP_FILE, etc.)
    --force, -f : force the execution
    --help
    --version
"

function usage()
{
    echo "$USAGE"
}

function version()
{
  echo "pact version 1.1.0 (based on apt-cyg 0.57)"
  echo "Tweaked and maintained by Tom Bujok (@tombujok)"
  echo "Copyright (c) 2014-2016. Released under the MIT."
}


function findworkspace()
{
    # default working directory and mirror
    if [[ -z $MIRROR ]]; then
        echo "WARNINIG! ~/.pact/pact.repo does not contains 'PACT_REPO' mirror address. Using the default one!"
        MIRROR=$DEFAULT_MIRROR
    fi
    cache=/setup

    # work wherever setup worked last, if possible
    mirrordir="$(echo "$MIRROR" | sed -e "s/:/%3a/g" -e "s:/:%2f:g")"

    echo "Working directory is $cache"
    echo "Mirror is $MIRROR"
    mkdir -p "$cache/$mirrordir"
    cd "$cache/$mirrordir" || return
}


function getsetup()
{

    # if no script indicated; do nothing and return successfully
    # should always be associated with pact calling itself
    if [ "$NOSCRIPTS" -gt 0 ]; then
        return 0
    fi

    currdir="$(pwd)"
    if [ "$INVALIDATE" -eq 0 ] &&
            [ -s "$currdir/$SETUP_FILE" ] &&
            [ -s "$currdir/${SETUP_FILE}-save" ] &&
            [ "$(find "$currdir" -mtime 0 -type f -regex ".*${SETUP_FILE}-save" 2>/dev/null)" ] &&
            cmp -s "$currdir/$SETUP_FILE" "$currdir/${SETUP_FILE}-save" ; then

        echo "$SETUP_FILE taken from the cache"

    else
        # make sure there is always a setup file
        touch "$SETUP_FILE"
        # create backup existing file
        mv "$SETUP_FILE" "${SETUP_FILE}-save"

        if wget --user-agent="$USER_AGENT" -N "${MIRROR%/}/$CYGWIN_VERSION/setup.bz2"; then
            if [ -e setup.bz2 ]; then
                bunzip2 setup.bz2
                mv setup "$SETUP_FILE"
                echo "Updated $SETUP_FILE"
                return 0
            fi
        fi

        if wget --user-agent="$USER_AGENT" -N "${MIRROR%/}/$CYGWIN_VERSION/$SETUP_FILE"; then
            if [ -e "$SETUP_FILE" ]; then
                echo "Updated $SETUP_FILE"
                return 0
            fi
        fi

        # restore previous version if unable to retrieve new one
        mv "${SETUP_FILE}-save" "$SETUP_FILE"
        echo "Error updating $SETUP_FILE, reverting"

    fi
}

function checkCygwin()
{

    # if no script indicated; do nothing and return successfully
    # should always be associated with pact calling itself
    if [ "$NOSCRIPTS" -gt 0 ]; then
        return 0
    fi

    # Check if the underlying Cygwin distribution is up to date
    local newest_cygwin_version
    newest_cygwin_version=$( get_newest_cygwin_version )
    if [[ -z "$newest_cygwin_version" ]]; then
        echo "[WARNING] Could not check the Cygwin distribution version. Installed packages may not work!"
        return
    else
        local newest_cygwin_version_number
        newest_cygwin_version_number=$( get_version_as_number "$newest_cygwin_version" )
        local current_cygwin_version
        current_cygwin_version=$( get_current_cygwin_version )
        local current_cygwin_version_number
        current_cygwin_version_number=$( get_version_as_number "$current_cygwin_version" )

        if [[ $newest_cygwin_version_number -gt $current_cygwin_version_number ]]; then
            if [[ $FORCE -eq 1 ]]; then
                echo "CRITICAL: The underlying Cygwin version is outdated! Force option enabled - continuing!"
            else
                echo "-------------------------------------------------------------------------------"
                echo "CRITICAL: The underlying Cygwin version is outdated!"
                echo "It's forbidden to install new packages as they may fail to work."
                echo "Execute 'babun update' and follow the instructions to update Cygwin."
                echo "If you know what you are doing add '--force' flag to proceed."
                echo "-------------------------------------------------------------------------------"
                exit 1
            fi
        fi
    fi
}

function installed()
{
    local pkg="$1"
    local found
    found=$(grep -o "^$pkg " "$INSTALLED_DB" | wc -l)
    echo "$found"
}

function installPkg()
{

    for pkg in "$@"
    do

        if [[ $FORCE -eq 0 ]] && [ "$(installed "$pkg")" -gt 0 ]; then
            echo "Package $pkg is already installed, skipping"
            continue
        fi

        echo ""
        echo "Installing $pkg"

        # look for package and save desc file

        mkdir -p "release/$pkg"
        awk -v package="$pkg" \
          'BEGIN{RS="\n\n@ "; FS="\n"} {if ($1 == package) {desc = $0; px++}} END {if (px == 1 && desc != "") print desc; else print "Package not found"}' \
          "$SETUP_FILE" > "release/$pkg/desc"

        desc=$(cat "release/$pkg/desc")
        if [[ "$desc" == "Package not found" ]]; then
            echo "Package $pkg not found or ambiguous name, exiting"
            rm -r "release/$pkg"
            exit 1
        fi
        echo "Found package $pkg"

        # pick the latest version, which comes first
        install=$(awk '/^install: / { print $2; exit }' "release/$pkg/desc")
        if [[ -z "$install" ]]
        then
            echo "Could not find \"$install\" in package description: obsolete package?"
            exit 1
        fi

        # download and unpack the bz2 file
        file=$(basename "$install")
        cd "release/$pkg" || return
        wget --user-agent="$USER_AGENT" "${MIRROR%/}/$install"

        # check the verification hash (md5 or sha512)
        digest=$(awk '/^install: / { print $4; exit }' desc)
        case ${#digest} in
            32) check=md5sum ;;
            128) check=sha512sum ;;
        esac
        if ! "$check" -c <<< "$digest $file"; then
            echo "Verification hash did not match, exiting"
            rm "$file" # Remove the file with bad checksum
            exit 1
        fi

        echo "Unpacking [$file]..."
        tar -C / -xv -f "$file" > "$SETUP_DIR/$pkg.lst" || return 1
        gzip -f "$SETUP_DIR/$pkg.lst"
        cd ../.. || return

        # update the package database

        awk -v pkg="$pkg" -v bz="$file" \
          '{if (ins != 1 && pkg < $1) {print pkg " " bz " 0"; ins=1}; print $0} END{if (ins != 1) print pkg " " bz " 0"}' \
          "$INSTALLED_DB" > /tmp/awk.$$

        mv "$INSTALLED_DB" "${INSTALLED_DB}-save"
        mv /tmp/awk.$$ "$INSTALLED_DB"

        # recursively install required packages
        requires=$(awk '$1=="requires", $0=$2' FS=': ' "release/$pkg/desc")

        warn=0
        if [[ ! -z "$requires" ]]
        then
            echo "Package $pkg requires the following packages, installing:"
            echo "$requires"

            for package in $requires
            do
                if [ "$(installed "$package")" -gt 0 ]; then
                    echo "Package $package is already installed, skipping"
                    continue
                fi
                pact --noscripts install "$package" || (( warn++ ))
            done
        fi

        if [ "$warn" -ne 0 ]; then
            echo "Warning: some required packages did not install, continuing"
        fi

        if [ "$NOSCRIPTS" -eq 0 ]; then
            # run all postinstall scripts
            mapfile -t pscripts < <(find /etc/postinstall/ -name '*.sh')
            for script in "${pscripts[@]}"
            do
                echo "Running postinstall script: $script"
                "$script"
                mv "$script" "$script.done"
            done
        fi

        echo "Package $pkg installed"

    done
}

function removePkg()
{

    for pkg in "$@"
    do

        if [ "$(installed "$pkg")" -eq 0 ]; then
            echo "Package $pkg is not installed, skipping"
            continue
        fi

        # check the blacklist of packages that are not allowed to
        # be removed to avoid making babun non-functional
        case "$pkg" in
            bash | bzip2 | coreutils | cygwin | gawk | tar | wget)
                echo "pact cannot remove package $pkg, exiting"
                exit 1
        esac

        if [ ! -e "$SETUP_DIR/$pkg.lst.gz" ]; then
            echo "Package manifest missing, cannot remove $pkg.  Exiting"
            exit 1
        fi
        echo "Removing $pkg"

        # run preremove scripts
        if [ -e "/etc/preremove/$pkg.sh" ]; then
            "/etc/preremove/$pkg.sh"
            rm "/etc/preremove/$pkg.sh"
        fi

        gzip -d "$SETUP_DIR/$pkg.lst.gz" | awk '/[^\/]$/ {print "rm -f \"/" $0 "\""}' | sh
        rm -f "$SETUP_DIR/$pkg.lst" "/etc/postinstall/$pkg.sh.done"

        awk -v pkg="$pkg" '{if (pkg != $1) print $0}' "$INSTALLED_DB" > /tmp/awk.$$
        mv "$INSTALLED_DB" "${INSTALLED_DB}-save"
        mv /tmp/awk.$$ "$INSTALLED_DB"

        # clean up the downloaded package details
        rm -r "release/$pkg"

        echo "Package $pkg removed"

    done
}

function describe()
{
    for arg in "$@"
    do
        echo ""
        awk -v query="$arg" \
            'BEGIN{RS="\n\n@ "; FS="\n"; ORS="\n"} {if ($1 ~ query) {print $0 "\n"}}' "$SETUP_FILE"
    done
    exit 0
}

function search()
{
    for arg in "$@"
    do
        echo ""
        echo "Searching for installed packages matching $arg:"
        awk '/[^ ]+ [^ ]+ 0/ {if ($1 ~ query) print $1}' query="$arg" "$INSTALLED_DB"
        echo ""
        echo "Searching for installable packages matching $arg:"
        awk -v query="$arg" \
            'BEGIN{IGNORECASE = 1; RS="\n\n@ "; FS="\n"; ORS="\n"} {if ($1 ~ query) {print $1}}' "$SETUP_FILE"
    done
    exit 0
}

function packageof()
{
    for arg in "$@"
    do
        key=$(which "$arg" 2>/dev/null | sed "s:^/::")
        [[ -z "$key" ]] && key="$arg"

        mapfile -t manifests < <(find "$SETUP_DIR" -type f -name '*.lst.gz')
        for manifest in "${manifests[@]}"
        do
            found=$(gzip -d "$manifest" | grep -o "$key" | wc -l)
            if [ "$found" -gt 0 ]; then
                package=$(echo "$manifest" | sed -e "s:$SETUP_DIR/::" -e "s/.lst.gz//")
                echo "Found $key in the package $package"
            fi
        done
    done
    exit 0
}

function show()
{
    echo 1>&2 "The following packages are installed:"
    awk '/[^ ]+ [^ ]+ 0/ {print $1}' "$INSTALLED_DB"
    exit 0
}

function check_inprogress()
{
    if [[ $NOSCRIPTS -eq 0 ]]; then
        check_only_one_running "pact"
    fi
}

function checkpackages()
{
    case $# in
        0)
            echo "Nothing to do, exiting"
            exit 0
            ;;
    esac
}


# Main processing of inputs
case $# in
    0) usage ; exit 0 ;;
esac

while [ $# -gt 0 ]; do

    case "$1" in

        --help)
            usage
            exit 0
            ;;

        --version)
            version
            exit 0
            ;;

        --mirror|-m)
            # user chose to override configurations for this run
            MIRROR="$2"
            echo "$MIRROR" > "$SETUP_DIR/last-mirror"
            echo "Mirror manually set to $MIRROR"
            shift ; shift
            ;;

        --noscripts)
            NOSCRIPTS=1
            shift
            ;;

        --force|-f)
            FORCE=1
            shift
            ;;

        --invalidate|-i)
            INVALIDATE=1
            shift
            ;;

        invalidate)
            shift
            check_inprogress
            INVALIDATE=1
            findworkspace
            getsetup
            exit 0
            ;;

        show)
            shift
            show
            ;;

        packageof)
            shift
            packageof "$@"
            ;;

        describe)
            shift
            check_inprogress
            findworkspace
            getsetup
            describe "$@"
            ;;

        find)
            shift
            check_inprogress
            findworkspace
            getsetup
            search "$@"
            ;;

        install)
            shift
            check_inprogress
            checkpackages "$@"
            checkCygwin
            findworkspace
            getsetup
            installPkg "$@"
            exit 0
            ;;

        remove)
            shift
            check_inprogress
            checkpackages "$@"
            findworkspace
            removePkg "$@"
            exit 0
            ;;

        update)
            shift
            check_inprogress
            checkpackages "$@"
            findworkspace
            removePkg "$@"
            checkCygwin
            getsetup
            installPkg "$@"
            exit 0
            ;;

        *)
            usage
            exit 0
            ;;

    esac
done
